openapi: 3.0.2
info:
  title: OpenAPI Course
  description: Specification for OpenAPI Course
  termsOfService: http://example.com/terms/
  contact:
    name: John Thompson
    url: https://springframework.guru
    email: john@springframework.guru
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
servers:
- url: https://dev.example.com
  description: Development Server
- url: https://qa.example.com 
  description: Quality Assurance
- url: https://prod.example.com
  description: Production Server
paths: 
  /v1/customers:
    get:
      parameters:
        - name: pageNumber
          in: query
          description: Page Number
          schema:
            type: integer
            format: int32
            default: 1
        - name: pageSize
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"
                    
               
  /v1/beers:
    get:
      parameters:
        $ref: "#/components/parameters/PageNamePara"
     
        

      responses:
        '200':
          description: List of Beers
          content:
            application/jason:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
                
                  

                          
                  
                  
                
        '404':
          description: Not Beers found
  
components: 
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: Stra√üe 32
        city:
          type: string
          example: Graz
        stateCode:
          type: string
          minLength: 2
          maxLength: 4
          enum: [STMK, NO, OB, KNT, VIE]
        zipCode:
          type: string
          example: 8020
    Customer:
      type: object
      description: customer object
      properties:
        id:
          type: string
          format: uiid
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: Max
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Musterman
        adress:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Customers
      items: 
        $ref: "#/components/schemas/Customer"
    Brewery:
      type: object
      properties:
        name:
          type: string
          example: Brauunion
        location:
          type: string
          example: Puntigam
    BeersObject:
      type: object
      properties:
        beerName:
          type: string
        variety:
          type: string
          enum: [ALE, PALE_ALE, IPA, WHEAT, LAGER]
        price:
          type: number
          format: float
          example: 3.5
        quantity:
          type: integer
          format: int32
          example: 2
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeersList:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: "#/components/schemas/BeersObject"
    BeerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeersList"
    CustomerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/CustomerList"
    
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean   
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
          
  parameters:
    PageNamePara:
      type: arr
      name: pageNumber
      in: query
      description: Page Number
      schema:
        type: integer
        format: int32
        default: 1  
    PageSizePara:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25

            

                          


                    